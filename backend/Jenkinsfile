pipeline {
	agent any
    environment {
		AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = credentials('aws-account-id')
        EC2_USER = "ec2-user"
        EC2_IP = credentials('target-ec2-ip')
        DB_PASSWORD = credentials('DB-PASSWORD')
        DB_URL = credentials('DB-URL')
        DB_USERNAME = credentials('DB-USERNAME')
        FRONTEND_URL = credentials('FRONTEND-URL')
        JWT_EXPIRATION = credentials('JWT-EXPIRATION')
        JWT_SECRET = credentials('JWT-SECRET')
        MAIL_PASSWORD = credentials('MAIL-PASSWORD')
        MAIL_USERNAME = credentials('MAIL-USERNAME')
        OPENAI_API_KEY = credentials('OPENAI-API-KEY')
        STRIPE_API_KEY = credentials('STRIPE-API-KEY')
        STRIPE_WEBHOOK_SECRET = credentials('STRIPE-WEBHOOK-SECRET')
        SSL_KEYSTORE_PASSWORD = credentials('SSL-KEYSTORE-PASSWORD')
        APPLE_SHARED_SECRET = credentials('APPLE-SHARED-SECRET')
        APPLE_ISSUER_ID = credentials('APPLE-ISSUER-ID')
        APPLE_KEY_ID = credentials('APPLE-KEY-ID')
        APPLE_SUBSCRIPTION_KEY_PATH = credentials('APPLE-SUBSCRIPTION-KEY-PATH')
    }
    stages {
		stage('Clone Repository') {
			steps {
				git branch: 'main', url: 'https://github.com/zCriminalArtist/RecipeGenerator.git'
            }
        }

        stage('Build JAR') {
			steps {
				dir('backend') {
					withCredentials([file(credentialsId: 'keystore-file', variable: 'KEYSTORE_FILE'), file(credentialsId: 'apple-subscription-key-file', variable: 'APPLE_SUBSCRIPTION_KEY_FILE')]) {
						sh '''
						chmod 777 $KEYSTORE_FILE
						chmod 777 $APPLE_SUBSCRIPTION_KEY_FILE
						mkdir -p src/main/resources/certs
                    	chmod 777 src/main/resources
                    	chmod 777 src/main/resources/certs
						'''
						sh "cp -f \"${KEYSTORE_FILE}\" \"src/main/resources/keystore.p12\""
						sh "cp -f \"${APPLE_SUBSCRIPTION_KEY_FILE}\"  \"${APPLE_SUBSCRIPTION_KEY_PATH}\""
						sh '''
                    	export BACKEND_URL=ingredigo.net:8443
                    	export DB_PASSWORD=$DB_PASSWORD
                    	export DB_URL=$DB_URL
                    	export DB_USERNAME=$DB_USERNAME
                    	export FRONTEND_URL=$FRONTEND_URL
                    	export JWT_EXPIRATION=$JWT_EXPIRATION
                    	export JWT_SECRET=$JWT_SECRET
                    	export MAIL_PASSWORD=$MAIL_PASSWORD
                    	export MAIL_USERNAME=$MAIL_USERNAME
                    	export OPENAI_API_KEY=$OPENAI_API_KEY
                    	export STRIPE_API_KEY=$STRIPE_API_KEY
                    	export STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET
                    	export APPLE_SHARED_SECRET=$APPLE_SHARED_SECRET
                    	export APPLE_ISSUER_ID=$APPLE_ISSUER_ID
                    	export APPLE_KEY_ID=$APPLE_KEY_ID
                    	export APPLE_SUBSCRIPTION_KEY_PATH=$APPLE_SUBSCRIPTION_KEY_PATH
                    	export SSL_KEYSTORE_PASSWORD=$SSL_KEYSTORE_PASSWORD
                    	export MAVEN_HOME=/opt/maven
                    	export PATH=$PATH:$MAVEN_HOME/bin
                    	mvn clean package -Dspring.profiles.active=prod
                    	'''
                    }
                }
            }
        }

        stage('Build Docker Image') {
			steps {
				sh '''
                ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/springboot/recipe-generator"
                docker build -t $ECR_REPO backend
                '''
            }
        }

        stage('Login to AWS ECR') {
			steps {
				sh '''
                ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/springboot/recipe-generator"
                aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                '''
            }
        }

        stage('Push Image to AWS ECR') {
			steps {
				sh '''
                ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/springboot/recipe-generator"
                docker push $ECR_REPO
                '''
            }
        }

        stage('Deploy on EC2') {
			steps {
				sshagent(['ec2-ssh-key']) {
					sh '''
                    ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/springboot/recipe-generator"
                    ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << EOF
                    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO
                    docker pull $ECR_REPO
                    docker stop myapp || true
                    docker rm myapp || true
                    docker run -d --name myapp -p 8443:8443 \\
                        -e DB_URL=$DB_URL \\
                        -e DB_USERNAME=$DB_USERNAME \\
                        -e DB_PASSWORD=$DB_PASSWORD \\
                        -e JWT_SECRET=$JWT_SECRET \\
                        -e JWT_EXPIRATION=$JWT_EXPIRATION \\
                        -e OPENAI_API_KEY=$OPENAI_API_KEY \\
                        -e STRIPE_API_KEY=$STRIPE_API_KEY \\
                        -e STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET \\
                        -e FRONTEND_URL=$FRONTEND_URL \\
                        -e BACKEND_URL=ingredigo.net:8443 \\
                        -e MAIL_USERNAME=$MAIL_USERNAME \\
                        -e MAIL_PASSWORD=$MAIL_PASSWORD \\
                        -e SSL_KEYSTORE_PASSWORD=$SSL_KEYSTORE_PASSWORD \\
                        -e APPLE_SHARED_SECRET=$APPLE_SHARED_SECRET \\
                        -e APPLE_ISSUER_ID=$APPLE_ISSUER_ID \\
                        -e APPLE_KEY_ID=$APPLE_KEY_ID \\
                        -e APPLE_SUBSCRIPTION_KEY_PATH=$APPLE_SUBSCRIPTION_KEY_PATH \\
                        -e spring.profiles.active=prod \\
                        $ECR_REPO
                    '''
                }
            }
        }

        stage('Verify Completion') {
			steps {
				sshagent(['ec2-ssh-key']) {
					sh '''
                    ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << EOF
                    docker ps -a
                    docker logs myapp || true
                    '''
                }
            }
        }
    }
}